/**
 * These codes are buggy! The finished code is on Eclipse project
**/



/*
1.1 Implement an algorithm to determine 
if a string has all unique characters. 
What if you cannot use additional data structures?
*/

//method 1. use hash map. Space O(1) (256 bytes), time O(n)
public class solution {

	private final int R = 256;
	
	public boolean unique(String str) {
		boolean hash[] = new boolean[R]; //auto initialize as all false
		int size = str.length();
		
		for (int i = 0; i < size; i++) {
			if(hash[str.charAt(i)] == false) {
				hash[str.charAt(i)] = true;
			} else {
				return false;
			}
		}
		
		return true;
	}
}

//method 2. use bitmap, Improved from method 1. 
//space O(1) (256 / 8 bytes), time O(n)


//method 3. use sort, space O(N), time O(logN)
//In place sort is impossible since string is immutable. We need to convert string to string builder
public class solution {
	
	public boolean unique(String str) {
		int size = str.length();
		
	}
	
	private int partition(char[] s, int lo, int hi) {
		int i = lo, j = hi;
		char pivot = s[lo];
		
		while(i <= j) {
			while(s[i] < pivot) i++;
			while(s[j] > pivot) j--;
			if(i <= j) {
				exch(s, i, j);
				i++;
				j--;
			}
		}
		return i;
	}
	
	private void exch(char[] s, int i, int j) {
		char t = s[i];
		s[i] = s[j];
		s[j] = t;
	}
	
	private void sort(char[] s, int lo, int hi) {
		int i = partition(s, lo, hi);
		if(lo < i - 1) sort(s, lo, i - 1);
		if(hi > i)     sort(s, i , hi);
	}
}


/*
1.2 Implement a function void reverse(char* str) in 
C or C++ which reverses a null- terminated string.
*/
void reverse(char* str) {
	if(str == NULL || str[0] == '\0') return ;
	char* end;
	char t;
	
	for(end = str; *(end + 1) != '\0'; end++);
	
	while (end > str) {
		t = *end;
		*end = *str;
		*str = t;
		end--;
		str++;
	}
}

//1.3
public class Solution_1 {
	int R = 256;
	public boolean answer(String str1, String str2) {
		if(str1.length() != str2.length()) {
			return false;
		}
		
		int[] charCount = new int[R];
		for (int i = 0; i < R; i++) {
			charCount[R] = 0;
		}
		
		for (int i = 0; i < str1.length(); i++) {
			charCount[str1.charAt(i)]++;
			charCount[str2.charAt(i)]--;
		}
		
		for (int i = 0; i < R; i++) {
			if(charCount[i] != 0) {
				return false;
			}
		}
		
		return true;
	}
}

public class Solution_2 {

	public boolean answer(String str1, String str2) {
		if(str1.length() != str2.length()) {
			return false;
		}
		
		str1 = sort(str1);
		str2 = sort(str2);
		
		for(int i = 0; i < str1.length(); i++) {
			if(str1.charAt(i) != str2.charAt(i)) {
				return false;
			}
		}
		
		return true;
	}
	
	public String sort(String s) {
		char[] s_array = s.toCharArray();
		java.util.Arrays.sort(s_array);
		return new String(s_array);
	}
	
}

//P1.4
class Solution1 {
	public char[] convert(char[] str, int length) {
		
		int count = 0;
		for(int i = 0; i < length; i++) {
			if(str[i] == ' ') count++;
		}
		
		if(count == 0) {
			return str;
		}
		
		for(int i = length; i >= 0; i--) {
			
			if(str[i] == ' ') {
				str[i + 2 * count - 2] = '%';
				str[i + 2 * count - 1] = '2';
				str[i + 2 * count]     = '0';
				count--;
				
				if(count == 0){
					break;
				}
			} else {
				str[i + 2 * count] = str[i];
			}
		}
		
		return str;
	}
}


//P1.5

class Solution1 {
	public String compress(String str) {
		StringBuffer strComp = new StringBuffer();
		int i, j;
		int len = str.length();
		int lenComp = 0;
		
		for(i = 0; i < len; i += j) {
			char c = str.charAt(i);
			strComp.append(c);
			lenComp++;
			
			for(j = 1; i + j < len; j++) {
				if(str.charAt(i + j) != c) {
					break;
				}
			}
			
			strComp.append(j);
			lenComp++;
			if(lenComp >= len) {
				return str;
			}
		}
		
		return strComp.toString();
	}
}


//P1.6
//here I assume the input is a (long int)[N][N] array (4 bytes each long). The rotation is clockwise, the screen is cubic
class Solution1 {

	public long[][] rotate(long[][] pixels) {
		int n = pixels.length;
		if(n <= 0 || n != pixels[0].length) {
			return pixels;
		}
		n--;
		
		for(int i = 0; i <= n / 2; i++) {
			for(int j = 0; j <= n / 2; j++) {
				exchange(pixels, i, j, n);
			}
		}
		
		return pixels;
	}
	
	private void exchange(long[][] pixels, int y, int x, int n) {
		long temp            = pixels[y][x];
		pixels[y][x]         = pixels[n - x][y];
		pixels[n - x][y]     = pixels[n - y][n - x];
		pixels[n - y][n - x] = pixels[x][n - y];
		pixels[x][N - y]     = temp;
	}
}


public void rotate(int[][] matrix, int n) {
for (int layer = 0; layer < n / 2; ++layer) {
int first =layer;
int last = n - 1 - layer;
for(int i = first; i < last; ++i) {
int offset = i - first; // savetop
int top = matrix[first][i];
// left -> top
matrix[first][i] = matrix[last-offset][first];
// bottom -> left
matrix[last-offset][first] = matrix[last][last - offset];
// right -> bottom
matrix[last][last - offset] = matrix[i][last];
// top -> right
m atrix[i][last] = to p ;

 }  
 }
 }

//P1.7 Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.
class Solution1 {
	public int[][] setZero(int[][] matrix) {
		int m = matrix.length;
		if(m <= 0) {
			return matrix;
		}
		int n = matrix[0].length;
		if(n <=0) {
			return matirx;
		}
		
		boolean[] zeroRows = new boolean[m];
		boolean[] zeroCols = new boolean[n];
		for(int i = 0; i < m; i++) { 
			zeroRows[i] = false;
		}
		for(int j = 0; j < n; j++) {
			zeroCols[j] = false;
		}
		
		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				if(matrix[i][j] == 0) {
					zeroRows[i] = true;
					zeroCols[j] = true;
				}
			}
		}
		
		for(int i = 0; i < m; i++) {
			if(zeroRows[i]) {
				for(int j = 0; j < n; j++) {
					matrix[i][j] = 0;
				}
			}
		}
		
		for(int j = 0; j < n; j++) {
			if(zeroCols[j]) {
				for(int i = 0; i < n; i++) {
					matrix[i][j] = 0;
				}
			}
		}
		
		return matrix;
	}
}

P1.8 Assume you have a method isSubstring which checks if one word is a substring of another. 
Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 using only 
one call to isSubstring (e.g.,"waterbottle"is a rota- tion of"erbottlewat").

class Solution1 {
	public boolean isRotation(String str1, String str2) {
		if(str1.length() != str2.length()) { 
			return false;
		}
		
		str1 = str1 + str1;
		
		return str1.contains(str2);
	}
	
}


//P2.1
public static void deleteDup(Node head) {
	
}


//P3_7
public class AnimalQueue {

	public class Animal {
		String species;
		int date;
		
		Animal(String species, int date) {
			this.species = species;
			this.date = date;
		}
		
		public boolean isCat() {
			return species == "cat";
		}
		
		public boolean isDog() {
			return species == "dog";
		}
		
		@Override
		public String toString() {
			return species + ", date: " + date;
		}
	}
	
	LinkedList<Animal> queue;
	Stack<Animal> buffer;
	
	AnimalQueue() {
		queue = new LinkedList<Animal>();
		buffere = new LinkedList<Animal>();
	}
	
	public void enqueue(String species, int date) {
		queue.add(new Animal(species, date));
	}
	
	public Animal dequeueAny() {
		return queue.poll();
	}
	
	public Animal dequeueCat() {
		Animal cat = null;
		while(!(queue.peek().isCat() || queue.isEmpty())) {
			buffer.push(queue.poll());
		}
		if(!queue.isEmpty()) {
			cat = queue.poll();
		}
		
		while(!buffer.isEmpty()) {
			queue.addFirst(buffer.pop());
		}
		
		return cat;
	}
	
	public Animal dequeueDog() {
		//not implemented, but the same idea as dequeueCat
		return null;
	}
}

















